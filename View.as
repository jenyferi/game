package {	import flash.display.MovieClip;	import flash.events.Event;	import com.greensock.TweenLite;		public class View extends MovieClip {		private var _controller:Controller;		private var _model:Model;				private var _boardSize:int;		private var _margin:int = 118;		private var _padding:int = 80;		private var _boardMC:MovieClip;		private var _emptyBalls:Array = [];		public function View(controller:Controller, model:Model) {			_controller = controller;			_model = model;						_boardMC = new MovieClip();			addChild(_boardMC);						_model.addEventListener(SwapEvent.ON_YES_MATCH, onYesMatch, false, 0, true);			_model.addEventListener(SwapEvent.ON_NO_MATCH, onNoMatch, false, 0, true);			_model.addEventListener(BallEvent.ON_EMPTY_BALL, onEmptyBall, false, 0, true);		}				private function onYesMatch(e:SwapEvent):void {			trace("yes match");			var ball1X:int = e.ball1.x;			var ball1Y:int = e.ball1.y;			var swapTime:Number = 0.4;						TweenLite.to(e.ball1, swapTime, {x:e.ball2.x, y:e.ball2.y, onComplete:modifyBlankBalls});			TweenLite.to(e.ball2, swapTime, {x:ball1X, y:ball1Y});		}		private function onNoMatch(e:SwapEvent):void {			trace("no match");			var ball1X:int = e.ball1.x;			var ball1Y:int = e.ball1.y;			var ball2X:int = e.ball2.x;			var ball2Y:int = e.ball2.y;			var swapTime:Number = 0.4;						TweenLite.to(e.ball1, swapTime, {x:ball2X, y:ball2Y, onComplete:swapBack});			TweenLite.to(e.ball2, swapTime, {x:ball1X, y:ball1Y});						function swapBack():void {				TweenLite.to(e.ball2, swapTime, {x:ball2X, y:ball2Y});				TweenLite.to(e.ball1, swapTime, {x:ball1X, y:ball1Y});			}		}				private function onEmptyBall(e:BallEvent):void {			_emptyBalls.push(e.ball);		}				private function modifyBlankBalls():void {			trace("how many empty? " + _emptyBalls.length);			for (var i:int = 0; i < _emptyBalls.length; i++){				_emptyBalls[i].changeToBlank();			}			_emptyBalls = [];		}				private function displayNewBalls():void {			trace("display new balls");		}		public function displayBoard():void {			modifyBlankBalls();			displayNewBalls();						_boardSize = _model.getBoardSize();						var c:int = 0;			var ball:Ball = null;			var r:int = 0;			while (r < _boardSize) {				c = 0;				while (c < _boardSize) {					ball = _model.getBoardArray()[r][c];					if (ball != null) {						ball.y = r * _padding;						ball.x = c * _padding;						_boardMC.addChild(ball);					}					++c;				}				++r;			}			_boardMC.x = _margin;			_boardMC.y = _margin;		}	}}